{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst client_metadata_1 = require(\"./cmap/handshake/client_metadata\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n  if (typeof options.srvHost !== 'string') {\n    throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n  }\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n  if (addresses.length === 0) {\n    throw new error_1.MongoAPIError('No addresses found at host');\n  }\n  for (const {\n    name\n  } of addresses) {\n    if (!(0, utils_1.matchesParentDomain)(name, lookupAddress)) {\n      throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n    }\n  }\n  const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  // Resolve TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await dns.promises.resolveTxt(lookupAddress);\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n  if (record.length > 1) {\n    throw new error_1.MongoParseError('Multiple text records not allowed');\n  }\n  const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n  if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n    options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n      source\n    });\n  }\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n  if (!allOptions) return;\n  const check = (a, b) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n    }\n    return false;\n  }\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\nfunction getIntFromOptions(name, value) {\n  const parsedInt = (0, utils_1.parseInteger)(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\nfunction* entriesFromString(value) {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    yield [key, value];\n  }\n}\nclass CaseInsensitiveMap extends Map {\n  constructor(entries = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  // validate BSONOptions\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (exports.FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n  // Validate options that can only be provided by one of uri or object\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n  const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n  if (uriMechanismProperties) {\n    for (const property of uriMechanismProperties) {\n      if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n        throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n      }\n    }\n  }\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n  // All option collection\n  const allProvidedOptions = new CaseInsensitiveMap();\n  const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n  for (const key of allProvidedKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValues = urlOptions.get(key) ?? [];\n    values.push(...urlValues);\n    allProvidedOptions.set(key, values);\n  }\n  if (allProvidedOptions.has('tlsCertificateKeyFile') && !allProvidedOptions.has('tlsCertificateFile')) {\n    allProvidedOptions.set('tlsCertificateFile', allProvidedOptions.get('tlsCertificateKeyFile'));\n  }\n  if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n    const tlsAndSslOpts = (allProvidedOptions.get('tls') || []).concat(allProvidedOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n  checkTLSOptions(allProvidedOptions);\n  const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n  // Option parsing and setting\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allProvidedOptions.get(key);\n    if (!values || values.length === 0) {\n      if (exports.DEFAULT_OPTIONS.has(key)) {\n        setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n      }\n    } else {\n      const {\n        deprecated\n      } = descriptor;\n      if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n      }\n      setOption(mongoOptions, key, descriptor, values);\n    }\n  }\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n    const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n    if ((isGssapi || isX509) && allProvidedOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n    }\n    if (!(isGssapi || isX509 || isAws || isOidc) && mongoOptions.dbName && !allProvidedOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n    }\n    mongoOptions.credentials.validate();\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  // Potential SRV Overrides and SRV connection string validations\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n  let loggerEnvOptions = {};\n  let loggerClientOptions = {};\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n      ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath\n    };\n  }\n  mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n  mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n  return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform\n  } = descriptor;\n  const name = target ?? key;\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    type: 'string'\n  },\n  auth: {\n    target: 'credentials',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      let password = options.credentials?.password;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({\n      options,\n      values\n    }) {\n      // We can have a combination of options passed in the URI and options passed\n      // as an object to the MongoClient. So we must transform the string options\n      // as well as merge them together with a potentially provided object.\n      let mechanismProperties = Object.create(null);\n      for (const optionValue of values) {\n        if (typeof optionValue === 'string') {\n          for (const [key, value] of entriesFromString(optionValue)) {\n            try {\n              mechanismProperties[key] = getBoolean(key, value);\n            } catch {\n              mechanismProperties[key] = value;\n            }\n          }\n        } else {\n          if (!(0, utils_1.isRecord)(optionValue)) {\n            throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n          }\n          mechanismProperties = {\n            ...optionValue\n          };\n        }\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({\n      values: [version]\n    }) {\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({\n      values\n    }) {\n      const compressionList = new Set();\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    default: {},\n    type: 'record'\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform({\n      name,\n      values: [value]\n    }) {\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean',\n    deprecated: 'Will not be able to turn off in the future.'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint',\n    deprecated: 'Will not be configurable in the future.'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform({\n      name,\n      values: [value]\n    }) {\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({\n      values: [value],\n      options\n    }) {\n      return {\n        ...options.driverInfo,\n        name: String(value)\n      };\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform({\n      values: [value]\n    }) {\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  useBigInt64: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({\n          ...options.readConcern,\n          ...value\n        });\n      }\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({\n      values: [level],\n      options\n    }) {\n      return read_concern_1.ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level\n      });\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n      }\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }) {\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({\n      name,\n      values: [value]\n    }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({\n      name,\n      values: [value]\n    }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  },\n  // MongoLogger\n  // TODO(NODE-4849): Tighten the type of mongodbLogPath\n  mongodbLogPath: {\n    type: 'any'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(([, descriptor]) => descriptor.default != null).map(([k, d]) => [k, d.default]));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect'), Symbol.for('@@mdb.enableMongoLogger'), Symbol.for('@@mdb.internalLoggerConfig')]);","map":{"version":3,"names":["dns","require","fs","mongodb_connection_string_url_1","url_1","mongo_credentials_1","providers_1","client_metadata_1","compression_1","encrypter_1","error_1","mongo_client_1","mongo_logger_1","read_concern_1","read_preference_1","utils_1","write_concern_1","VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","resolveSRVRecord","options","srvHost","MongoAPIError","split","length","lookupAddress","addresses","promises","resolveSrv","srvServiceName","name","matchesParentDomain","hostAddresses","map","r","HostAddress","fromString","port","validateLoadBalancedOptions","record","resolveTxt","error","code","MongoParseError","txtRecordOptions","URLSearchParams","join","txtRecordOptionKeys","keys","some","key","includes","option","get","source","undefined","replicaSet","loadBalanced","userSpecifiedAuthSource","credentials","AUTH_MECHS_AUTH_SRC_EXTERNAL","has","mechanism","MongoCredentials","merge","userSpecifiedReplicaSet","srvMaxHosts","exports","checkTLSOptions","allOptions","check","a","b","TRUTHS","Set","FALSEHOODS","getBoolean","value","valueString","String","toLowerCase","emitWarningOnce","getIntFromOptions","parsedInt","parseInteger","getUIntFromOptions","parsedValue","entriesFromString","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","k","v","set","delete","parseOptions","uri","mongoClient","MongoClient","useBigInt64","promoteLongs","promoteValues","url","default","hosts","isSRV","mongoOptions","Object","create","flag","getOwnPropertySymbols","FEATURE_FLAGS","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","searchParams","values","getAll","objectOptions","filter","uriMechanismProperties","property","test","allProvidedOptions","allProvidedKeys","objectOptionValue","push","urlValues","tlsAndSslOpts","concat","bind","size","unsupportedOptions","setDifference","Array","from","OPTIONS","s","optionWord","isOrAre","descriptor","DEFAULT_OPTIONS","setOption","deprecated","deprecatedMsg","emitWarning","isGssapi","AuthMechanism","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","isOidc","MONGODB_OIDC","MongoMissingCredentialsError","validate","MONGODB_DEFAULT","mechanismProperties","autoEncryption","Encrypter","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","loggerFeatureFlag","Symbol","for","loggerEnvOptions","loggerClientOptions","MONGODB_LOG_COMMAND","process","env","MONGODB_LOG_TOPOLOGY","MONGODB_LOG_SERVER_SELECTION","MONGODB_LOG_CONNECTION","MONGODB_LOG_ALL","MONGODB_LOG_MAX_DOCUMENT_LENGTH","MONGODB_LOG_PATH","mongodbLogPath","mongoLoggerOptions","MongoLogger","resolveOptions","metadata","makeClientMetadata","isSrv","target","type","transform","isRecord","transformValue","appName","authMechanism","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","optionValue","authSource","bsonRegExp","serverApi","version","serverApiToValidate","versionToValidate","ServerApiVersion","checkKeys","compressors","compressionList","compVal","compValArray","isArray","MongoInvalidArgumentError","c","Compressor","add","connectTimeoutMS","driverInfo","enableUtf8Validation","family","fieldsAsRaw","forceServerObjectId","fsync","wc","WriteConcern","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","journal","keepAlive","keepAliveInitialDelay","localThresholdMS","maxConnecting","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","readPreference","ReadPreference","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","noDelay","pkFactory","DEFAULT_PK_FACTORY","createPk","promoteBuffers","readConcern","ReadConcern","JSON","stringify","readConcernLevel","level","primary","rp","rpOpts","hedge","tags","readPreferenceTags","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","readFileSync","encoding","sslCRL","sslCert","sslKey","sslPass","sslValidate","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCAFile","tlsCertificateFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","checkServerIdentity","rejectUnauthorized","w","waitQueueTimeoutMS","wtimeout","wtimeoutMS","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","d"],"sources":["C:\\Users\\reshav\\node_modules\\mongodb\\src\\connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport * as fs from 'fs';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\n\nimport type { Document } from './bson';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './cmap/auth/providers';\nimport { makeClientMetadata } from './cmap/handshake/client_metadata';\nimport { Compressor, CompressorName } from './cmap/wire_protocol/compression';\nimport { Encrypter } from './encrypter';\nimport {\n  MongoAPIError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError,\n  MongoParseError\n} from './error';\nimport {\n  MongoClient,\n  MongoClientOptions,\n  MongoOptions,\n  PkFactory,\n  ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport { MongoLogger, MongoLoggerEnvOptions, MongoLoggerMongoClientOptions } from './mongo_logger';\nimport { ReadConcern, ReadConcernLevel } from './read_concern';\nimport { ReadPreference, ReadPreferenceMode } from './read_preference';\nimport type { TagSet } from './sdam/server_description';\nimport {\n  DEFAULT_PK_FACTORY,\n  emitWarning,\n  emitWarningOnce,\n  HostAddress,\n  isRecord,\n  matchesParentDomain,\n  parseInteger,\n  setDifference\n} from './utils';\nimport { W, WriteConcern } from './write_concern';\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\n\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR =\n  'loadBalanced option not supported when directConnection is provided';\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport async function resolveSRVRecord(options: MongoOptions): Promise<HostAddress[]> {\n  if (typeof options.srvHost !== 'string') {\n    throw new MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    throw new MongoAPIError('URI must include hostname, domain name, and tld');\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  const addresses = await dns.promises.resolveSrv(\n    `_${options.srvServiceName}._tcp.${lookupAddress}`\n  );\n\n  if (addresses.length === 0) {\n    throw new MongoAPIError('No addresses found at host');\n  }\n\n  for (const { name } of addresses) {\n    if (!matchesParentDomain(name, lookupAddress)) {\n      throw new MongoAPIError('Server record does not share hostname with parent URI');\n    }\n  }\n\n  const hostAddresses = addresses.map(r => HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  // Resolve TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await dns.promises.resolveTxt(lookupAddress);\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n\n  if (record.length > 1) {\n    throw new MongoParseError('Multiple text records not allowed');\n  }\n\n  const txtRecordOptions = new URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n  if (\n    !options.userSpecifiedAuthSource &&\n    source &&\n    options.credentials &&\n    !AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)\n  ) {\n    options.credentials = MongoCredentials.merge(options.credentials, { source });\n  }\n\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  return hostAddresses;\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions: CaseInsensitiveMap): void {\n  if (!allOptions) return;\n  const check = (a: string, b: string) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`\n      );\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`\n      );\n    }\n    return false;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getIntFromOptions(name: string, value: unknown): number {\n  const parsedInt = parseInteger(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUIntFromOptions(name: string, value: unknown): number {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction* entriesFromString(value: string): Generator<[string, string]> {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap<Value = any> extends Map<string, Value> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  override has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  override get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  override set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  override delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  // validate BSONOptions\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n    throw new MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n    throw new MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n\n  const urlOptions = new CaseInsensitiveMap<unknown[]>();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap<unknown>(\n    Object.entries(options).filter(([, v]) => v != null)\n  );\n\n  // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new MongoParseError(\n      'URI cannot contain `serverApi`, it can only be passed to the client'\n    );\n  }\n\n  const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n  if (uriMechanismProperties) {\n    for (const property of uriMechanismProperties) {\n      if (/(^|,)ALLOWED_HOSTS:/.test(property as string)) {\n        throw new MongoParseError(\n          'Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.'\n        );\n      }\n    }\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  // All option collection\n\n  const allProvidedOptions = new CaseInsensitiveMap<unknown[]>();\n\n  const allProvidedKeys = new Set<string>([...urlOptions.keys(), ...objectOptions.keys()]);\n\n  for (const key of allProvidedKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n\n    const urlValues = urlOptions.get(key) ?? [];\n    values.push(...urlValues);\n    allProvidedOptions.set(key, values);\n  }\n\n  if (\n    allProvidedOptions.has('tlsCertificateKeyFile') &&\n    !allProvidedOptions.has('tlsCertificateFile')\n  ) {\n    allProvidedOptions.set('tlsCertificateFile', allProvidedOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n    const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n      .concat(allProvidedOptions.get('ssl') || [])\n      .map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  checkTLSOptions(allProvidedOptions);\n\n  const unsupportedOptions = setDifference(\n    allProvidedKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  // Option parsing and setting\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allProvidedOptions.get(key);\n    if (!values || values.length === 0) {\n      if (DEFAULT_OPTIONS.has(key)) {\n        setOption(mongoOptions, key, descriptor, [DEFAULT_OPTIONS.get(key)]);\n      }\n    } else {\n      const { deprecated } = descriptor;\n      if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n      }\n\n      setOption(mongoOptions, key, descriptor, values);\n    }\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    const isOidc = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_OIDC;\n    if (\n      (isGssapi || isX509) &&\n      allProvidedOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`\n      );\n    }\n\n    if (\n      !(isGssapi || isX509 || isAws || isOidc) &&\n      mongoOptions.dbName &&\n      !allProvidedOptions.has('authSource')\n    ) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new MongoMissingCredentialsError(\n        `When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`\n      );\n    }\n\n    mongoOptions.credentials.validate();\n\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (\n      mongoOptions.credentials.password === '' &&\n      mongoOptions.credentials.username === '' &&\n      mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_DEFAULT &&\n      Object.keys(mongoOptions.credentials.mechanismProperties).length === 0\n    ) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  // Potential SRV Overrides and SRV connection string validations\n\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions =\n      urlOptions.has('srvMaxHosts') ||\n      objectOptions.has('srvMaxHosts') ||\n      urlOptions.has('srvServiceName') ||\n      objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new MongoParseError(\n        'Cannot use srvMaxHosts or srvServiceName with a non-srv connection string'\n      );\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (\n    !mongoOptions.proxyHost &&\n    (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (\n    (mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n    (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(\n    key => urlOptions.get(key) ?? []\n  );\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new MongoParseError(\n      'Proxy options cannot be specified multiple times in the connection string'\n    );\n  }\n\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n\n  let loggerEnvOptions: MongoLoggerEnvOptions = {};\n  let loggerClientOptions: MongoLoggerMongoClientOptions = {};\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n      ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath\n    };\n  }\n  mongoOptions.mongoLoggerOptions = MongoLogger.resolveOptions(\n    loggerEnvOptions,\n    loggerClientOptions\n  );\n\n  mongoOptions.metadata = makeClientMetadata(mongoOptions);\n\n  return mongoOptions;\n}\n\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(\n  hosts: HostAddress[] | string[],\n  mongoOptions: MongoOptions,\n  isSrv: boolean\n): void {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform } = descriptor;\n  const name = target ?? key;\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    type: 'string'\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values }): MongoCredentials {\n      // We can have a combination of options passed in the URI and options passed\n      // as an object to the MongoClient. So we must transform the string options\n      // as well as merge them together with a potentially provided object.\n      let mechanismProperties = Object.create(null);\n\n      for (const optionValue of values) {\n        if (typeof optionValue === 'string') {\n          for (const [key, value] of entriesFromString(optionValue)) {\n            try {\n              mechanismProperties[key] = getBoolean(key, value);\n            } catch {\n              mechanismProperties[key] = value;\n            }\n          }\n        } else {\n          if (!isRecord(optionValue)) {\n            throw new MongoParseError('AuthMechanismProperties must be an object');\n          }\n          mechanismProperties = { ...optionValue };\n        }\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanismProperties\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as (CompressorName[] | string)[]) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new MongoInvalidArgumentError(\n            'compressors must be an array or a comma-delimited list of strings'\n          );\n        }\n        for (const c of compValArray) {\n          if (Object.keys(Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoInvalidArgumentError(\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\n                Compressor\n              )}.`\n            );\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    default: {},\n    type: 'record'\n  },\n  enableUtf8Validation: { type: 'boolean', default: true },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean',\n    deprecated: 'Will not be able to turn off in the future.'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint',\n    deprecated: 'Will not be configurable in the future.'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform({ name, values: [value] }): number {\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  useBigInt64: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n      throw new MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }: {\n      values: Array<string | Record<string, string>[]>;\n      options: MongoClientOptions;\n    }) {\n      const tags: Array<string | Record<string, string>> = Array.isArray(values[0])\n        ? values[0]\n        : (values as Array<string>);\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted NodeJS Options\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: { type: 'boolean' } as OptionDescriptor,\n  useUnifiedTopology: { type: 'boolean' } as OptionDescriptor,\n  // MongoLogger\n  // TODO(NODE-4849): Tighten the type of mongodbLogPath\n  mongodbLogPath: { type: 'any' }\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default])\n);\n\n/**\n * Set of permitted feature flags\n * @internal\n */\nexport const FEATURE_FLAGS = new Set([\n  Symbol.for('@@mdb.skipPingOnConnect'),\n  Symbol.for('@@mdb.enableMongoLogger'),\n  Symbol.for('@@mdb.internalLoggerConfig')\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}